
class Json
{
    var json;
    var offset;
    var l;

    fun init(json) {
        this.json = json;
        this.offset = 0;
        this.l = len(json);
    }

    fun decode() {
        this.skip_whitespace();
        if (this.json[this.offset] == 'n') {
            return this.parse_null();
        } else if (this.json[this.offset] == 't') {
            return this.parse_true();
        } else if (this.json[this.offset] == 'f') {
            return this.parse_false();
        } else if (this.json[this.offset] == '"') {
            return this.parse_string();
        } else if (this.json[this.offset] == '[') {
            return this.parse_array();
        } else if (this.json[this.offset] == '{') {
            return this.parse_object();
        }
        return this.parse_number();
    }

    fun parse_number() {
        var i = this.offset;
        while (i < this.l
            && this.json[i] != ' ' 
            && this.json[i] != ',' 
            && this.json[i] != ']'
            && this.json[i] != '}') {
            i = i + 1;
        }
        var value = substr(this.json, this.offset, i);
        this.offset = i;
        return intval(value);
    }

    fun parse_array() {
        var array = [];
        this.offset = this.offset + 1;
        this.skip_whitespace();
        while (!this.is_eof() && this.json[this.offset] != ']') {
            array = append(array, this.decode());
            this.skip_whitespace();
            if (!this.is_eof() && this.json[this.offset] == ',') {
                this.offset = this.offset + 1;
                this.skip_whitespace();
            }
        }
        this.offset = this.offset + 1;
        return array;
    }

    fun parse_object() {
        var object = {};
        this.offset = this.offset + 1;
        this.skip_whitespace();
        while (!this.is_eof() && this.json[this.offset] != '}') {
            var key = this.parse_string();
            this.skip_whitespace();
            this.offset = this.offset + 1;
            this.skip_whitespace();
            object[key] = this.decode();
            this.skip_whitespace();
            if (!this.is_eof() && this.json[this.offset] == ',') {
                this.offset = this.offset + 1;
                this.skip_whitespace();
            }
        }
        this.offset = this.offset + 1;
        return object;
    }

    fun skip_whitespace() {
        while (
            !this.is_eof() 
            && (this.json[this.offset] == ' ' 
                || this.json[this.offset] == '\n' 
                || this.json[this.offset] == '\t' 
                || this.json[this.offset] == '\r')) {
            this.offset = this.offset + 1;
        }
    }

    fun is_eof() {
        return this.offset >= this.l-1;
    }

    fun parse_string() {
        this.offset = this.offset + 1;
        var i = this.offset;
        while (i < this.l && this.json[i] != '"') {
            i = i + 1;
        }
        var value = substr(this.json, this.offset, i);
        this.offset = i + 1;
        return value;
    }

    fun parse_null() {
        var value = substr(this.json, this.offset, this.offset+4);
        this.offset = this.offset + 4;
        return nil;
    }

    fun parse_true() {
        var value = substr(this.json, this.offset, this.offset+4);
        this.offset = this.offset + 4;
        return true;
    }

    fun parse_false() {
        var value = substr(this.json, this.offset, this.offset5);
        this.offset = this.offset + 5;
        return false;
    }

}

fun json_encode(value) {
    if (type(value) == "number") {
        return strval(value);
    } else if (type(value) == "string") {
        return '"' + value + '"';
    } else if (type(value) == "array") {
        var result = "[";
        for (var i = 0; i < len(value); i = i + 1) {
            result = result + json_encode(value[i]);
            if (i < len(value) - 1) {
                result = result + ", ";
            }
        }
        return result + "]";
    } else if (type(value) == "object") {
        var result = "{";
        var i = 0;
        for (var key in value) {
            result = result + '"' + key + '":' + json_encode(value[key]);
            if (i < len(value) - 1) {
                result = result + ",";
            }
            i = i + 1;
        }
        return result + "}";
    } else if (type(value) == "nil") {
        return "null";
    } else if (type(value) == "boolean") {
        if (value) {
            return "true";
        } else {
            return "false";
        }
    }
    return "null";
}


var json = new Json('"hello world"');
println(typeis(json.decode()));

var json = new Json('123456');
println(typeis(json.decode()));

var json = new Json('nil');
println(typeis(json.decode()));

var json = new Json('true');
println(typeis(json.decode()));

var json = new Json('false');
println(typeis(json.decode()));

var json = new Json('[1, 2, 3, null, "aaa", true, false, 4, 5, 200, 34]');

println(typeis(json.decode()));

var json = new Json('{"key": "value", "true": true, "false": false, "key2": 1, "key3": {"key4": "value4"}, "key4": [1, 2, 3, 4, 5]}');
var result = json.decode();
println(typeis(result));
println('result["key"]: ', result["key"]);
println(typeis(result));
println('result["key4"]: ', result["key4"]);
println('result["key4"] type is: ', typeis(result["key4"]));
println('result["key3"] type is: ', typeis(result["key3"]));


println('json_encode([1, 2, 3, 4, 5]): ', json_encode([1, 2, 3, 4, 5]));

var x = {"key": "value", "true": true, "false": false, "key2": 1, "key3": {"key4": "value4"}, "key4": [1, 2, 3, 4, 5]};
println(x);
println('decode json', json_encode(x));